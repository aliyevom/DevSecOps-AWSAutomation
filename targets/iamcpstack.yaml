Parameters:
  DevOpsAcct:
    Type: String
  ProjectPrefix:
    Type: String
  IAMCFStack:
    Type: String
Resources:
  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${ProjectPrefix}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "CodePipelinePolicy1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "codepipeline:*"
                  - "codecommit:Get*"
                  - "codebuild:BatchGetBuilds"
                  - "codecommit:UploadArchive"
                  - "codecommit:GitPull"
                  - "codecommit:CancelUploadArchive"
                  - "codepipeline:*"
                  - "codecommit:List*"
                  - "codebuild:StartBuild"
                  - "s3:GetBucketLocation"
                  - "s3:ListAllMyBuckets"
                  - "iam:ListRoles"
                Resource:
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetEncryptionConfiguration"
                  - "s3:ListBucketVersions"
                  - "s3:ListBucket"
                  - "s3:GetBucketVersioning"
                  - "s3:GetObjectVersion"
                  - "kms:Decrypt" 
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                Resource:
                  - !Sub "arn:aws:s3:::release-bucket-${ProjectPrefix}-${AWS::Region}-${AWS::AccountId}"
                  - !Sub "arn:aws:s3:::release-bucket-${ProjectPrefix}-${AWS::Region}-${AWS::AccountId}/*"
                  - !Sub "arn:aws:s3:::${ProjectPrefix}-${AWS::Region}-${AWS::AccountId}-artifacts"
                  - !Sub "arn:aws:s3:::${ProjectPrefix}-${AWS::Region}-${AWS::AccountId}-artifacts/*"
              -
                Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                Condition:
                  'ForAnyValue:StringLike':
                    'kms:ResourceAliases': !Sub alias/${ProjectPrefix}-key
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:CreateStack"
                  - "cloudformation:UpdateStack"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectPrefix}/*"
              -
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !ImportValue
                      'Fn::Sub': '${IAMCFStack}-CloudFormationRoleArn'
Outputs:
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodePipelineRoleArn"
  StackName:
    Value: !Ref AWS::StackName 
